package Basic;

import java.util.Arrays;

/**
 * @Author : wuyayan
 * @Date : Created in 19:42 2021/12/15
 * @Description : 面向对象，三大特性：封装、继承、多态
 * @Version : V1.0.0
 **/
public class ObjectOriented {
    /**
     * 面向过程：实现一个功能时，每一个步骤都要亲历亲为，每一步的详细处理每个细节。(强调步骤)
     * 面向过程比较直接高效。
     * 面向对象：实现一个功能时，不关心具体的步骤，而找一个专门的人来做这个事。（强调对象，即参与者，以及各自需要做什么）
     * 面向对象比较易于复用、扩展和维护。
     */
    public static void main(String[] args) {

        //面向对象

        //数组静态初始化
        int[] array = {10,20,30,40,50};
        //打印格式为：[10,20,30,40,50]
        //面向过程：
        System.out.println("[");
        for (int i = 0;i<array.length;i++ ) {
            if(i==array.length-1){
                System.out.println(array[i]+"]");
            }else {
                System.out.println(array[i] + ",");
            }
        }
        System.out.println("============================");
        //面向对象
        System.out.println(Arrays.toString(array));

        //封装====================================================
//        封装的意义，在于明确标识出允许外部使用的所有成员函数和数据项
//        内部细节对外部调用透明，外部调用无需修改或者关心内部实现
//        两个例子：
//        1.JavaBean的属性私有，提供getset对外访问，因为属性的赋值或者获取逻辑就只能由JavaBean本身决定，而不能由外部修改。
//        2.orm框架：数据库，我们不需要关心链接是怎么建立的、sql是如何执行的，只需要引入mybatis，调方法即可

        //继承=====================================================
//        继承基类的方法，并作出自己的改变和扩展
//        子类共性的方法或者属性直接使用父类的，而不需要自己再dinginess，只需要扩展自己的个性化的

        //多态======================================================
//        基于对象所属类的不同，外部对同一个方法的调用，其执行逻辑不同
//        继承，方法重写，父类引用指向子类对象
//        父类类型 变量名 = new 子类对象;
//        变量名.方法名();
//        无法调用子类特有的功能
    }
}
